---
author: mommermi
date: 2016-01-20 22:56:09+00:00
layout: post
title: 'Spring 2016: PHY599 - Python for Scientists'
categories:
- software
- teaching
tags:
- resource
---

Some useful links:



	
  * [Anaconda](https://www.continuum.io/downloads)

	
  * [The Python Tutorial](https://docs.python.org/2/tutorial/index.html)

	
  * [Python Standard Library](https://docs.python.org/2/library/index.html#library-index)

	
  * [Style Guide for Python](https://www.python.org/dev/peps/pep-0008/)


Timeline and scripts from the lecture:

**Please note that lecture notes are no longer available here;  example scripts, however, are available on this site. For lecture notes, please refer to [https://github.com/mommermi/Introduction-to-Python-for-Scientists](https://github.com/mommermi/Introduction-to-Python-for-Scientists)**



	
  * **Jan 22**: some basis; [data types](https://docs.python.org/2/tutorial/introduction.html), [strings](https://docs.python.org/2/tutorial/introduction.html#strings), [lists](https://docs.python.org/2/tutorial/introduction.html#lists)
_Exercise_: make Python work on your computer!

	
  * **Jan 29**: more basics; [more lists](https://docs.python.org/2/tutorial/introduction.html#lists), [dictionaries](https://docs.python.org/2/tutorial/datastructures.html?highlight=dictionary#dictionaries), [sets](https://docs.python.org/2/tutorial/datastructures.html?highlight=dictionary#sets),
_Exercise_: Write a code that reads [this data file with Flagstaff climate data](http://phy54.phy.nau.edu/python_for_scientists/flagstaff_climate.dat), calculates the average temperature of every month, as well as the amount of rain and snow that falls on every day of the year.  Store your results in dictionaries temp_c, rain, and snow, such that temp_c['june'] provides you the average temperature in June measured in Celsius and rain['jan 29']/snow['jan 29'] provides you the amount of rain and snow that fell on that day. Note that precipitation numbers in the data file are cumulative.

	
  * **Feb 5**: **no class**

	
  * **Feb 12**: advanced concepts: [control flow](https://docs.python.org/2/tutorial/controlflow.html), [file i/o](https://docs.python.org/2/tutorial/inputoutput.html), [modules](https://docs.python.org/2/tutorial/modules.html), [exceptions](https://docs.python.org/2/tutorial/errors.html), [classes](https://docs.python.org/2/tutorial/classes.html)
_Exercise_: Write three different functions, each of which returns the first n numbers of the [Fibonacci Sequence](https://en.wikipedia.org/wiki/Fibonacci_number) as a list. One of the functions has to use a for-loop, one has to use a while-loop, and the last one has to use a [recursive approach](http://phy54.phy.nau.edu/python_for_scientists/20160212.py) (a function that calls itself over and over again).

	
  * **Feb 19**: [modules](https://docs.python.org/2/tutorial/modules.html), standard libraries: [math](https://docs.python.org/2/library/math.html), [os](https://docs.python.org/2/library/os.html), [datetime](https://docs.python.org/2/library/datetime.html), [urllib2](https://docs.python.org/2/library/urllib2.html), [subprocess](https://docs.python.org/2.6/library/subprocess.html)
_Exercise_: Write a code that grabs the [NAU weather website](http://cefns.nau.edu/~nauws/) every 5 minutes and extracts the current temperature, dew point, humidity, wind speed, and direction (hint: identify the corresponding html source code lines and extract the numbers); write the data into a file (another hint: use append when opening the file so you can interrupt your running code).

	
  * **Feb 26**: [numpy](https://docs.scipy.org/doc/numpy-dev/reference/index.html): [basics](https://docs.scipy.org/doc/numpy-dev/user/quickstart.html), [arrays](http://docs.scipy.org/doc/numpy-dev/user/basics.creation.html)
_Exercise_: Calculate Euler's number _e_ from the series of factorials (see [here](https://en.wikipedia.org/wiki/E_%28mathematical_constant%29)) in two different approaches: (1) not using any numpy functionality at all (i.e., using a simple for-loop and lists), (2) using only numpy functionality (hint: you will have to write your own factorial function, do not use the scipy one). Evaluate the series to its n-th term for n=1e2, 1e3, 1e4 and determine for each approach its runtime and the residual to _numpy.e_. Try to make the numpy approach as fast as possible!

	
  * **Mar 4**: more numpy: [masked arrays](http://docs.scipy.org/doc/numpy/reference/maskedarray.html), [structured arrays](http://docs.scipy.org/doc/numpy/user/basics.rec.html), [file i/o](http://docs.scipy.org/doc/numpy/reference/routines.io.html)
_Exercise_: Use numpy functions to read in [MPCORB.DAT](http://www.minorplanetcenter.net/iau/MPCORB/MPCORB.DAT), the list of all known asteroids in the Solar System (here is some [documentation](http://www.minorplanetcenter.net/iau/info/MPOrbitFormat.html) on the structure of the file and be warned: this is a big file), into a structured array. Using as little code as possible, derive the following things:
1. how many asteroids have q<1.3 and can be considered near-Earth asteroids? (q is the perihelion distance, which is defined as q=a(1-e)) How many are trans-Neptunian objects (q>30)?
2. how many asteroids have accurately known orbits (uncertainty parameter U=0)? How many NEOs/TNOs?
(Hint: only read in those columns from the file that you really need using the usecols option in genfromtxt.)

	
  * **Mar 11**: even more numpy: [random](http://docs.scipy.org/doc/numpy/reference/routines.random.html), [statistics](http://docs.scipy.org/doc/numpy/reference/routines.statistics.html), [linalg](http://docs.scipy.org/doc/numpy/reference/routines.linalg.html), lambda function
_Exercise_: Prove the [Central limit theorem](https://en.wikipedia.org/wiki/Central_limit_theorem), by showing that for large values of lambda, the Poisson distribution approaches the normal distribution. Use numpy functions to show the convergence, e.g., using histograms.

	
  * **Mar 18**: **no class** (spring break)

	
  * **Mar 25**: [matplotlib](http://matplotlib.org/); _Example_: scatter plotting image and reference catalogs ([script](http://www.physics.nau.edu/~mommert/python_for_scientists/20160325/plot_catalogs.py), [image catalog](http://www.physics.nau.edu/~mommert/python_for_scientists/20160325/image_catalog.dat), [reference catalog](http://www.physics.nau.edu/~mommert/python_for_scientists/20160325/reference_catalog.dat)) _Exercise_: implement the matching between both catalogs based on RA and Dec and try to derive the magnitude zeropoint of the image.

	
  * **Apr 1**: Example continued: match two catalogs and derive the magnitude zeropoint of an image ([script](http://www.physics.nau.edu/~mommert/python_for_scientists/20160401/calibrate.py), [image catalog](http://www.physics.nau.edu/~mommert/python_for_scientists/20160325/image_catalog.dat), [reference catalog](http://www.physics.nau.edu/~mommert/python_for_scientists/20160325/reference_catalog.dat)) _Exercise_:  catalog matching with the for loops will be slow for large amounts of data. Design a matching routine using numpy's array functions (hint: you can calculate the distance of one object from the first catalog to all objects in the second catalog at one time) and then try to implement a matching routine that utilizes a [kd-tree query](http://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.KDTree.query.html#scipy.spatial.KDTree.query). What are the runtimes for the invididual routines? What are the runtimes if you try to match two catalogs with coordinates created from random numbers with each other if each catalog has 1e3, 1e4, 1e5, 1e6 sources?

	
  * **Apr 8**: [scipy.optimize](http://docs.scipy.org/doc/scipy/reference/optimize.html); _Example_: fitting a model to data ([script](http://www.physics.nau.edu/~mommert/python_for_scientists/20160408/fit.py), [data](http://www.physics.nau.edu/~mommert/python_for_scientists/20160408/signal.dat))
_Exercise_: Image a binary asteroid (primary + secondary body), each of which rotates, and the secondary also orbits the primary. Derive the rotation periods of both asteroids from the [data ](http://www.physics.nau.edu/~mommert/python_for_scientists/20160408/asteroid_signal.dat)(cumulative flux from both bodies as a function of time) under the assumption that the secondary is always visible. Use the same method we used in class. Then try to implement a [Lomb-Scargle Periodogram ](https://en.wikipedia.org/wiki/Least-squares_spectral_analysis#The_Lomb.E2.80.93Scargle_periodogram)using [scipy.signal.lombscargle](http://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.lombscargle.html). Do you get the same result?

	
  * **Apr 15**: [scipy.interpolate](http://docs.scipy.org/doc/scipy/reference/interpolate.html#module-scipy.interpolate); _Example_: interpolating 1d and 2d data ([script](http://www.physics.nau.edu/~mommert/python_for_scientists/20160415.py))

	
  * **Apr 22**: [jupyter](http://jupyter.org/), [threading](https://docs.python.org/2/library/threading.html) ([threading template](http://www.physics.nau.edu/~mommert/python_for_scientists/20160422/threading_template.py), [example code](http://www.physics.nau.edu/~mommert/python_for_scientists/20160422/example.py))

	
  * **Apr 29**: **no class**

	
  * **May 6**: **no class**

	
  * **May 13**: **no class**



